<?xml version="1.0" encoding="UTF-8"?>
<record_update sys_domain="global" table="sys_ui_action">
    <sys_ui_action action="INSERT_OR_UPDATE">
        <action_name/>
        <active>true</active>
        <client>false</client>
        <comments/>
        <condition>(current.state=='final')&amp;&amp;(current.administrator==gs.getUserID()||gs.hasRole('x_inthe_eval.admin'))</condition>
        <form_action>true</form_action>
        <form_button>true</form_button>
        <form_context_menu>false</form_context_menu>
        <form_link>false</form_link>
        <hint/>
        <list_action>false</list_action>
        <list_banner_button>false</list_banner_button>
        <list_button>false</list_button>
        <list_choice>false</list_choice>
        <list_context_menu>false</list_context_menu>
        <list_link>false</list_link>
        <list_save_with_form_button>false</list_save_with_form_button>
        <name>Generate Score Cards</name>
        <onclick/>
        <order>100</order>
        <script><![CDATA[//Validate child use cases are marked as final
var ucStateArray = [];
var grUse = new GlideRecord('x_inthe_eval_use_case');
grUse.addQuery('evaluation',current.sys_id);
grUse.query();
while (grUse.next()) { 
	ucStateArray.push(grUse.state+'');}
var useCaseStates = ucStateArray.toString();
var notFinal = useCaseStates.includes("in_progress");
if(notFinal == true){
	gs.addErrorMessage("Please ensure all use cases are marked as Final before continuing.");
}
else if (notFinal == false){
	
	// combine and deduplicate evaluators and push to combined evaluators list
var allEvaluators = [];
var addEvaluators = [];
var UCLeaders = [];
var UCEval = [];
var solPC = [];

//add users from current record
if(current.administrator != ''){
	allEvaluators.push(current.administrator.sys_id);
}
if(current.architect != '' && current.architect != current.administrator){
	allEvaluators.push(current.architect.sys_id);
}
if(current.solutions_manager != ''&& current.solutions_manager != current.administrator&& current.solutions_manager != current.architect){
	allEvaluators.push(current.solutions_manager);
}
if(current.additional_evaluators != ''){
	var duplicate = '';
	addEvaluators = current.additional_evaluators.split(",");
	//gs.addInfoMessage("First current add'l evaluator is: "+ addEvaluators[0]);
	for(a=0;a<addEvaluators.length;a++){
		for(i=0;i<allEvaluators.length;i++){
			if(addEvaluators[a]==allEvaluators[i]){
				duplicate = true;
			}
		}
		if(duplicate != true){
			allEvaluators.push(addEvaluators[a]+'');
		}
	}
}
//gs.addInfoMessage("Unique users from current record are: "+allEvaluators.toString());

//lookup use case users, check for duplicates, add to array
var grUC = new GlideRecord('x_inthe_eval_use_case');
grUC.addQuery('evaluation',current.sys_id);
grUC.query();
if(grUC.getRowCount()==0){
	gs.addErrorMessage("No use cases found. Please create a use case before continuing.");
	action.setRedirectURL('x_inthe_eval_evaluation.do?sys_id='+current.sys_id);
}
else if(grUC.getRowCount()>0){
	//gs.addInfoMessage("Use case is found. Calculating users.");
	while(grUC.next()){
		if(grUC.use_case_leader != ''){
			//gs.addInfoMessage("UC leader is: "+grUC.use_case_leader);
			UCLeaders.push(grUC.use_case_leader+'');
		}
		if(grUC.evaluators != ''){
			//gs.addInfoMessage("UC evals are: "+grUC.evaluators);
			var useCaseEvals = [];
			useCaseEvals = grUC.evaluators.split(",");
			for(k=0;k<useCaseEvals.length;k++){
				UCEval.push(useCaseEvals[k]);
			}
		}
	}
	//gs.addInfoMessage("Use Case Leaders are: "+UCLeaders.length);
	//gs.addInfoMessage("Use Case Evaluators are: "+UCEval.length);
	for(b=0;b<UCLeaders.length;b++){
		var duplicate = '';
		for(i=0;i<allEvaluators.length;i++){
			if(UCLeaders[b] == allEvaluators[i]){
				duplicate = true;
			}
		}
		//gs.addInfoMessage("Duplicate is: "+duplicate);
		if(duplicate != true){
			allEvaluators.push(UCLeaders[b]);
		}
	}
	if(UCEval.length>0){
		//gs.addInfoMessage("Use Case evaluators not blank.");
		for(c=0;c<UCEval.length;c++){
			var duplicate = '';
			for(i=0;i<allEvaluators.length;i++){
				//gs.addInfoMessage(UCEval[c]+" compared to "+allEvaluators[i]);
				if(UCEval[c] == allEvaluators[i]){
					duplicate = true;
				}
			}
			if(duplicate != true){
				//gs.addInfoMessage("User added to list.");
				allEvaluators.push(UCEval[c]+'');
			}
		}
	}
}
//gs.addInfoMessage("Users after Use Case: " +allEvaluators.length);

//lookup solutions primary contacts and add to all users array if not duplicate
var grSol = new GlideRecord('x_inthe_eval_solution');
grSol.addQuery('evaluation',current.sys_id);
grSol.query();
//gs.addInfoMessage("Solutions count is: "+grSol.getRowCount());
if(grSol.getRowCount()>0){
	while(grSol.next()){
		if(grSol.primary_contact !=''){
			solPC.push(grSol.primary_contact.sys_id);
		}
	}
	for(d=0;d<solPC.length;d++){
		var duplicate = '';
		for(i=0;i<allEvaluators.length;i++){
			if(solPC[d]==allEvaluators[i]){
				duplicate = true;
			}
		}
		if(duplicate !=true){
			allEvaluators.push(solPC[d]);
		}
	}
}
else if (grSol.getRowCount()==0){
	gs.addErrorMessage("No Solutions have been created. Please create a solution before continuing.");
}

//gs.addInfoMessage("Total unique evaluators count is: "+allEvaluators.length);
//gs.addInfoMessage("Additional count is: "+addEvaluators.length);
//gs.addInfoMessage("Use Case Leaders count is: "+UCLeaders.length);
//gs.addInfoMessage("Use Case Evaluators count is: "+UCEval.length);
//gs.addInfoMessage("Solutions PC count is: "+solPC.length);
current.evaluators = allEvaluators.toString();
current.update();
var evaluators = allEvaluators;

	//Mark child solutions as Complete
	var grSolutions = new GlideRecord('x_inthe_eval_solution');
	grSolutions.addQuery('evaluation', current.sys_id);
	grSolutions.query();
	grSolutions.setValue('state',  'complete');
	grSolutions.updateMultiple();
	//gs.addInfoMessage('Child solutions updated.');

	//Mark child Use Cases as Scoring
	var grUseCase = new GlideRecord('x_inthe_eval_use_case');
	grUseCase.addQuery('evaluation', current.sys_id);
	grUseCase.query();
	grUseCase.setValue('state',  'scoring');
	grUseCase.updateMultiple();
	//gs.addInfoMessage('Child Use Cases updated.');

	//Mark child Criteria as Scoring
	var grCriteria = new GlideRecord('x_inthe_eval_criterion');
	grCriteria.addQuery('evaluation', current.sys_id);
	grCriteria.query();
	grCriteria.setValue('state',  'scoring');
	grCriteria.updateMultiple();
	//gs.addInfoMessage('Child Criteria updated.');

	//Mark current record as Scoring
	var grCurrent = new GlideRecord('x_inthe_eval_evaluation');
	grCurrent.addQuery('sys_id',current.sys_id);
	grCurrent.query();
	grCurrent.setValue('state','scoring');
	grCurrent.updateMultiple();
	//gs.addInfoMessage('Evaluation finalized.');

	//Get solutions and put in array
	var solutionsArray = [];
	var solutions = new GlideRecord('x_inthe_eval_solution');
	solutions.addQuery('evaluation',current.sys_id);
	solutions.query();
	//gs.addInfoMessage('Solutions Row Count is: ' + solutions.getRowCount());
	while (solutions.next()) { 
		solutionsArray.push(solutions.sys_id + '');
	}
	//gs.addInfoMessage('Solutions Array is ' + solutionsArray);


	//Get criteria and put in array
	var criteriaArray = [];
	var criteria = new GlideRecord('x_inthe_eval_criterion');
	criteria.addQuery('evaluation',current.sys_id);
	criteria.query();
	while (criteria.next()) { 
		criteriaArray.push(criteria.sys_id + '');
	}
	//gs.addInfoMessage('Criteria Array is ' + criteriaArray);


	//Create new array and solLength variables
	var scoreCards = [];
	var solLength = solutionsArray.length;
	//gs.addInfoMessage('solLength is ' + solLength);
	//gs.addInfoMessage('Evaluators length is ' + evaluators.length);

	//Create score cards
	for (l=0; l < evaluators.length; l++){
		var a=0;
		while (a < solLength){
			var grScore = new GlideRecord("x_inthe_eval_score_card");
			grScore.initialize();
			grScore.evaluator = evaluators[l];
			grScore.evaluation = current.sys_id;
			grScore.solution = solutionsArray[a];
			grScore.state = 'in_progress';
			var newScoreCard = grScore.insert();
			scoreCards.push(grScore.sys_id);
			a++;
		}
	} 
	//gs.addInfoMessage('Score Cards are ' + scoreCards);


	//Create ratings records from score cards
	var rating = [];
	try{

		//Create ratings for each score card
		for(j=0,k=0; j<scoreCards.length;j++,k++){

			// Get criteria length
			var criLength = criteriaArray.length;

			//Lookup evaluator from Score Card
			var scEvaluator = '';
			var grEvaluator = new GlideRecord("x_inthe_eval_score_card");
			grEvaluator.addQuery('sys_id',scoreCards[j]);
			grEvaluator.query();
			//gs.addInfoMessage('Row Count is: ' + grEvaluator.getRowCount());
			while (grEvaluator.next()) { 
				scEvaluator = grEvaluator.evaluator;
				//gs.addInfoMessage("Evaluator is " + scEvaluator);
			}

			//Lookup solution from score card
			var scSolution = '';
			var grSolution = new GlideRecord("x_inthe_eval_score_card");
			grSolution.addQuery('sys_id',scoreCards[j]);
			grSolution.query();
			while (grSolution.next()) { 
				scSolution = grSolution.solution;
				//gs.addInfoMessage("Solution is " + scSolution);
			}

			//For each criteria create a rating record for each user and solution
			for (k=0; k<criLength; k++){
				var grRating = new GlideRecord("x_inthe_eval_rating");
				grRating.initialize();
				grRating.score_card = scoreCards[j];
				grRating.criterion = criteriaArray[k];
				grRating.evaluator = scEvaluator;
				grRating.solution = scSolution;
				var newRating = grRating.insert();
				var ratingsArray = [];
				ratingsArray.push(grRating.sys_id);
				//gs.addInfoMessage("Ratings added: " + ratingsArray);
			}
		}
	}	catch(e) {
		gs.addErrorMessage("Error in UI Action 'grRatings' on line #{0}: {1}",e.lineNumber,e.message);
		gs.error("Error in UI Action 'grRatings' on line #{0}: {1}",e.lineNumber,e.message);
	}
			//closes  if statement from the beginning
	}
action.setReturnURL(current);
action.setRedirectURL(current);]]></script>
        <show_insert>false</show_insert>
        <show_multiple_update>false</show_multiple_update>
        <show_query>false</show_query>
        <show_update>true</show_update>
        <sys_class_name>sys_ui_action</sys_class_name>
        <sys_created_by>awyoung</sys_created_by>
        <sys_created_on>2017-07-10 22:29:16</sys_created_on>
        <sys_customer_update>true</sys_customer_update>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>c9df63324fffb200f5f3d49f0310c731</sys_id>
        <sys_mod_count>74</sys_mod_count>
        <sys_name>Generate Score Cards</sys_name>
        <sys_overrides/>
        <sys_package display_value="Solution Evaluation Tool" source="x_inthe_eval">a1a219604f27f640af76d0af0310c7c7</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Solution Evaluation Tool">a1a219604f27f640af76d0af0310c7c7</sys_scope>
        <sys_update_name>sys_ui_action_c9df63324fffb200f5f3d49f0310c731</sys_update_name>
        <sys_updated_by>awyoung</sys_updated_by>
        <sys_updated_on>2017-09-21 18:17:48</sys_updated_on>
        <table>x_inthe_eval_evaluation</table>
        <ui11_compatible>true</ui11_compatible>
        <ui16_compatible>true</ui16_compatible>
    </sys_ui_action>
</record_update>
